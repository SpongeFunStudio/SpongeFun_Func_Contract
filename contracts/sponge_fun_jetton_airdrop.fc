#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/jetton-utils.fc";
#include "imports/workchain.fc";

global int total_claimed;
global int public_key;
global slice sponge_fun_minter_address;
global slice admin_address;
global cell jetton_wallet_code;
global cell claimed_hashmap;

;; load_data populates storage variables using stored data
() load_data() impure {

    var ds = get_data().begin_parse();

    total_claimed = ds~load_coins();
    public_key = ds~load_uint(256);
    sponge_fun_minter_address = ds~load_msg_addr();
    admin_address = ds~load_msg_addr();
    jetton_wallet_code = ds~load_ref();
    claimed_hashmap = ds~load_dict();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_coins(total_claimed)
            .store_uint(public_key, 256)
            .store_slice(sponge_fun_minter_address)
            .store_slice(admin_address)
            .store_ref(jetton_wallet_code)
            .store_dict(claimed_hashmap)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }

    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();

    if (msg_flags & 1) { ;; is bounced
        in_msg_body~skip_bounced_prefix();
        ;; process only mint bounces
        ifnot (in_msg_body~load_op() == op::transfer) {
            return ();
        }
        in_msg_body~skip_query_id();
        int jetton_amount = in_msg_body~load_coins();
        load_data();
        ;; in case of mint token to public_sale_contract failed, total_claimed no need deduce
        if(jetton_amount != MAX_SUPPLY - MAX_SUPPLY * AIRDRP_PERCENTAGE / DENOMINATOR){
            total_claimed -= jetton_amount;
        }
        save_data();
        return ();
    }

    slice sender_address = in_msg_full_slice~load_msg_addr();
    (int op, int query_id) = in_msg_body~load_op_and_query_id();
    load_data();

    if (op == op::claim_airdrop) {
        var signature = in_msg_body~load_bits(512);
        cell master_msg = in_msg_body~load_ref();
        cell value = master_msg;
        in_msg_body.end_parse();
        slice master_msg_slice = master_msg.begin_parse();

        ;;var signature = master_msg_slice~load_bits(512);
        var hash = slice_hash(master_msg_slice);
        throw_unless(
            error::invalid_signature, 
            check_signature(hash, signature, public_key)
        ); ;; Revert on wrong signature

        (_, int success) = claimed_hashmap.udict_get_ref?(256, hash);
        throw_unless(error::repeat_signature, success == 0); ;; Revert if the sequence number of the incoming message does not match the stored sequence number

        int msg_seqno = master_msg_slice~load_uint(32);
        ;;airdrop contract hold all token first, but just 35% can be claimed, than send 65% token to public sale contract after more than 1/2 of airdrop tokens are claimed
        int claim_amount = master_msg_slice~load_coins();
        if(claim_amount > MAX_SUPPLY * AIRDRP_PERCENTAGE / DENOMINATOR - total_claimed){
            claim_amount = MAX_SUPPLY * AIRDRP_PERCENTAGE / DENOMINATOR - total_claimed;
        }
        throw_unless(error::claim_out, claim_amount > 0);
        throw_unless(
            error::exceed_max_claim_amount, 
            claim_amount <= MAX_SUPPLY * MAX_PERCENTAGE_EACH_CLAIM / DENOMINATOR
        );

        cell msg_body = begin_cell()
            .store_op(op::transfer)
            .store_query_id(query_id)
            .store_coins(claim_amount)
            .store_slice(sender_address)
            .store_slice(sender_address)
            .store_int(0, 1)
            .store_coins(0)
            .store_int(0, 1)
            .end_cell();

        slice airdrop_wallet = calculate_user_jetton_wallet_address(
            my_address(), 
            sponge_fun_minter_address, 
            jetton_wallet_code
        );
        cell msg = begin_cell()
            .store_msg_flags_and_address_none(BOUNCEABLE)
            .store_slice(airdrop_wallet)
            .store_coins(0)
            .store_only_body_ref(msg_body)
            .end_cell();

        send_raw_message(
            msg, 
            SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE 
            | SEND_MODE_BOUNCE_ON_ACTION_FAIL
        );

        total_claimed += claim_amount;
        claimed_hashmap~udict_set_ref(256, hash, value);
        save_data();
        return ();
    }

    if (op == op::mint_to_public_sale_contract) {
        throw_unless(error::not_owner, equal_slices_bits(sender_address, admin_address));

        ;; only can start public sale stage when 4/5 of airdrop tokens are claimed
        throw_unless(
            error::can_not_start_public_sale, 
            total_claimed >= (MAX_SUPPLY * AIRDRP_PERCENTAGE * 4) / (5 * DENOMINATOR)
        );
        slice public_sale_contract_address = in_msg_body~load_msg_addr();
        check_same_workchain(public_sale_contract_address);

        ;; all left token send to public sale contract first, but just 35% of total supply can be sale, see code in public_sale contract
        int all_left_token = MAX_SUPPLY - MAX_SUPPLY * AIRDRP_PERCENTAGE / DENOMINATOR;

        cell msg_body = begin_cell()
            .store_op(op::transfer)
            .store_query_id(query_id)
            .store_coins(all_left_token)
            .store_slice(public_sale_contract_address)
            .store_slice(sender_address)
            .store_int(0, 1)
            .store_coins(0)
            .store_int(0, 1)
            .end_cell();

        slice airdrop_wallet = calculate_user_jetton_wallet_address(
            my_address(), 
            sponge_fun_minter_address, 
            jetton_wallet_code
        );

        cell msg = begin_cell()
            .store_msg_flags_and_address_none(BOUNCEABLE)
            .store_slice(airdrop_wallet)
            .store_coins(0)
            .store_only_body_ref(msg_body)
            .end_cell();

        send_raw_message(
            msg, 
            SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE 
            | SEND_MODE_BOUNCE_ON_ACTION_FAIL
        );
        return ();
    }

    if (op == op::change_admin) {
        throw_unless(error::not_owner, equal_slices_bits(sender_address, admin_address));
        admin_address = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        save_data();
        return ();
    }

    if(op == op::withdraw) {

        throw_unless(error::not_owner, equal_slices_bits(sender_address, admin_address));

        int withdraw_amount = in_msg_body~load_coins();
        throw_unless(error::balance_not_enough, my_balance >=  withdraw_amount); ;; Make sure the smc has enough balance
        int send_amount = min(withdraw_amount, my_balance - MIN_TON_FOR_STORAGE);
        throw_unless(error::not_have_enough_amount, send_amount > 0);

        cell msg = begin_cell()
                .store_msg_flags_and_address_none(BOUNCEABLE)
                .store_slice(sender_address) ;; withdraw to owner
                .store_coins(send_amount)
                .store_prefix_only_body()
            .end_cell();

        send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY);
        return ();
    }

    if (op == op::top_up) {
        return (); ;; just accept tons
    }

    throw(error::wrong_op);
}

int get_smc_balance() method_id {
    [int balance, _] = get_balance(); ;; get_balance() returns tuple [(int)balance of TON, (cell)extra currency]
    return balance;
}

(int, int, slice, slice, cell) get_airdrop_status() method_id {
    load_data();
    return (total_claimed, public_key, sponge_fun_minter_address, admin_address, jetton_wallet_code);
}
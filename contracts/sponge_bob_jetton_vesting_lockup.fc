#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/jetton-utils.fc";

global slice sponge_bob_minter_address; ;; address of the minter
global slice admin_address; ;; address of the contract owner
global int start_time;      ;; start time of lock
global int total_duration;  ;; total duration of lock
global int unlock_period;   ;; unlock period
global int cliff_diration;  ;; cliff duration
global int total_lock_amount;    ;; total lock amount of tokens
global int already_unlocked_amount; ;; already unlocked amount
global cell jetton_wallet_code; ;; code of the wallet contract

() load_data() inline {
    var ds = get_data().begin_parse();

    sponge_bob_minter_address = ds~load_msg_addr();
    admin_address = ds~load_msg_addr();
    start_time = ds~load_uint(64);
    total_duration = ds~load_uint(32);
    unlock_period = ds~load_uint(32);
    cliff_diration = ds~load_uint(32);
    total_lock_amount = ds~load_coins();
    already_unlocked_amount = ds~load_coins();
    jetton_wallet_code = ds~load_ref();

    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(sponge_bob_minter_address)
            .store_slice(admin_address)
            .store_uint(start_time, 64)
            .store_uint(total_duration, 32)
            .store_uint(unlock_period, 32)
            .store_uint(cliff_diration, 32)
            .store_coins(total_lock_amount)
            .store_coins(already_unlocked_amount)
            .store_ref(jetton_wallet_code)
            .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }

    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();

    if (msg_flags & 1) { ;; is bounced

        in_msg_body~skip_bounced_prefix();
        ;; process only vesting_unlock_token bounces
        ifnot (in_msg_body~load_op() == op::vesting_unlock_token) {
            return ();
        }

        in_msg_body~skip_query_id();
        int jetton_amount = in_msg_body~load_coins();
        load_data();
        already_unlocked_amount -= jetton_amount;
        save_data();

        return ();
    }

    slice sender_address = in_msg_full_slice~load_msg_addr();
    (int op, int query_id) = in_msg_body~load_op_and_query_id();
    load_data();

    if (op == op::vesting_unlock_token) {
        throw_unless(error::not_owner, equal_slices_bits(sender_address, admin_address));
        
        int now_time = now();
        int locked_amount = (now_time < start_time + cliff_diration) ? 
        total_lock_amount : (total_lock_amount - total_lock_amount * ((now_time - start_time) / unlock_period) / (total_duration / unlock_period));
        
        int unlock_amount = total_lock_amount - locked_amount - already_unlocked_amount;
        throw_unless(error::already_unlock_all, unlock_amount > 0);

        cell msg_body = begin_cell()
            .store_op(op::transfer)
            .store_query_id(query_id)
            .store_coins(unlock_amount)
            .store_slice(sender_address)
            .store_slice(sender_address)
            .store_int(0, 1)
            .store_coins(0)
            .store_int(0, 1)
            .end_cell();

        slice vesting_lockup_wallet = calculate_user_jetton_wallet_address(
            my_address(), 
            sponge_bob_minter_address, 
            jetton_wallet_code
        );
        cell msg = begin_cell()
            .store_msg_flags_and_address_none(BOUNCEABLE)
            .store_slice(vesting_lockup_wallet)
            .store_coins(0)
            .store_only_body_ref(msg_body)
            .end_cell();

        send_raw_message(
            msg, 
            SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE 
            | SEND_MODE_BOUNCE_ON_ACTION_FAIL
        );

        already_unlocked_amount += unlock_amount;
        save_data();
        return ();
    }

    throw(error::wrong_op);
}
